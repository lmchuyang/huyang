package com.purang.jpa;


import java.sql.SQLException;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;

import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class testBestPractice {

    private static EntityManagerFactory entityManagerFactory;
    private static ApplicationContext ctx;
	  @BeforeClass
	    public static void setUpClass() {
	        String[] configLocations = new String[] {"resourceJdbc.xml","com/purang/jpa/applicationContext-jpa.xml"};
	        ctx = new ClassPathXmlApplicationContext(configLocations);
	        entityManagerFactory = ctx.getBean(EntityManagerFactory.class);
	    }

	    @Before
	    public void setUp() throws SQLException {
	        //id自增主键从0开始
	        String createTableSql = "create memory table test" +
	        "(id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
	        "name varchar(100))";
	        executeSql(createTableSql);
	    }
	    @After
	    public void tearDown() throws SQLException {
	        String dropTableSql = "drop table test";
	        executeSql(dropTableSql);
	    }
	    
	    private void executeSql(String sql) throws SQLException {
	        EntityManager em = entityManagerFactory.createEntityManager();
	        beginTransaction(em);
	        em.createNativeQuery(sql).executeUpdate();
	        commitTransaction(em);
	        closeEntityManager(em);
	    }

	@Test
	public void test() {
		IUserDao userDao = ctx.getBean(UserJpaDaoImpl.class);
		UserModel2 model2 = new UserModel2();
		model2.setName("jpatest");
		userDao.save(model2);
		System.out.println(userDao.countAll());
	}
	
	private void closeEntityManager(EntityManager em) {
        em.close();
    }

    private void rollbackTransacrion(EntityManager em) throws SQLException {
        if(em != null) {
            em.getTransaction().rollback();
        }         
    }

    private void commitTransaction(EntityManager em) throws SQLException {
        em.getTransaction().commit();
    }

    private void beginTransaction(EntityManager em) throws SQLException {
        em.getTransaction().begin();
    }
    
}
