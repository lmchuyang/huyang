package com.purang.hql;


import java.sql.SQLException;



import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.junit.After;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.omg.CORBA.SystemException;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.orm.hibernate3.HibernateCallback;
import org.springframework.orm.hibernate3.HibernateTemplate;

import com.purang.jdbc.UserModel;


public class HibernateTest {
	private static SessionFactory sessionFactory;  
	@BeforeClass  
	public static void beforeClass() {
		  String[] configLocations = new String[] {  
	                "resourceJdbc.xml",  
	                "applicationContext-hibernate.xml"};  
	        ApplicationContext ctx = new ClassPathXmlApplicationContext(configLocations);  
	        sessionFactory = ctx.getBean("sessionFactory", SessionFactory.class);  
	}
	@Before  
	public void setUp() {  
	  //id自增主键从0开始  
	  final String createTableSql ="CREATE TABLE `test` (`id` INT(11) PRIMARY KEY , `name` VARCHAR(100) )"+
 " ENGINE=INNODB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;";
			  //"create memory table test" + "(id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " + "name varchar(100))";  
	  sessionFactory.openSession().  
	  createSQLQuery(createTableSql).executeUpdate();  
	}  
	@After  
	public void tearDown() {  
	    final String dropTableSql = "drop table test";  
	    sessionFactory.openSession().  
	    createSQLQuery(dropTableSql).executeUpdate();  
	}  
	
/*	@Test
	public void testFirst(){
		Session session =sessionFactory.openSession();
		Transaction transaction = null;
		
		try {
			transaction = beginTransaction(session);
			UserModel2 userModel = new UserModel2();
			userModel.setMyName("myname");
			session.save(userModel);
		}  catch (RuntimeException  e) {  
				rollbackTransaction(transaction);
	        throw e;  
	    } finally {  
	        commitTransaction(session);  
	    }  
	}*/
	
	private Transaction beginTransaction(Session session) {  
	    Transaction transaction = (Transaction) session.beginTransaction();  
	    ((org.hibernate.Transaction) transaction).begin();  
	    return transaction;  
	}  
	private void rollbackTransaction(Transaction transaction) throws IllegalStateException, SystemException {  
	   if(transaction != null) {  
	        transaction.rollback();  
	    }  
	}  
	private void commitTransaction(Session session) {  
	    session.close();  
	}
	
	@Test  
	public void testHibernateTemplate() {  
	HibernateTemplate hibernateTemplate =  new HibernateTemplate(sessionFactory);  
	    final UserModel model = new UserModel();  
	    model.setName("myName");  
	    hibernateTemplate.save(model);  
	    //通过回调允许更复杂操作  
	    hibernateTemplate.execute(new HibernateCallback<Void>() {  
	        @Override
	        public Void doInHibernate(Session session) throws HibernateException, SQLException {  
	            session.save(model);  
	            return null;  
	        }});
	}
}
